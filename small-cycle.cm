# 重构的概念与节奏

在A团队开发过一段时间的同事知道，A软件有很多结构不好的代码分散在各个模块。这些功能模块存在维护难度高，出现问题不好定位等问题，除此之外，工程中还存在无用代码多，注释的代码较多等问题，一直没有得到很好的解决，在之前的学习过程中，知道《重构-改善既有代码的设计》这本书里面有成熟的方法来解决上述问题。在开发V2.0版本中，回放模块中就发现了一块较大的功能已经彻底无用，由于时间原因及代码耦合度的问题，在发布时没有处理，当前开发V2.01时间条件充足，决定删除之，为提高删除无用代码及重构部分逻辑在效率研读了此书，并在操作中应用其方法，达到学以致用的目的。

分享是最好的学习方式之一，故计划写三篇此书的读后感，与众分享，希望与大家共进步。

本文是第一篇读书笔记，是前言及第一章的内容读后感，主要回答两个问题：
* 为什么需要重构？
* 重构的节奏是什么？
此外，读书过程中还有一些好观点体会值得分享。

## 为什么需要重构
要回答为什么需要重构，首先需要回答什么是重构。重构的基本概念如下：**在不改变软件可观察行为的前提下改善程序的内部结构。也就是外面看起来什么都没变，实际的代码内部结构已经变得更好维护了。** 从这个角度一眼看过去，V2.0里面的绝大多数内容是重写，而不是重构。
**在当前的软件结构不能轻易添加新的功能特性的时候，我们需要重构。** 正常的软件开发过程是需求分析，软件设计，编码及测试，这是进行一个新的软件开发的成熟步骤，此开发模型为软件开发提供路线图，并无任何问题，但是在软件交付使用后，涉及到维护，要维护就会有新的功能增加，就会有软件版本的迭代，复杂的软件通常（只要软件还没死）总会有那么一刻会到来：新功能特性不是很容易地在当前的结构上增加了，这时候，我们需要修正之前的软件结构，使其方便增加新的功能特性。各位有没有发现，目前A就是这样的情况？我们通常进行的工作就是不断重构优化代码，在上面增加新的业务与功能。

从上面的过程来看，**重构的本质是在代码修改好之后改进它的设计。** 在A的生命周期里面，版本迭代一直前进，其实也意味着重构在一直不断的进行，一直在调整软件结构使之符合最新的业务及功能，以应对不断变化的需求。事实上是很多时候，我们已经不断在使用重构的技术，只是不知道在使用而已。

## 重构的节奏是什么？
**嗯，那就是测试，小修改，测试，小修改，测试，小修改……，如果你希望阅读后要带走些什么，我觉得就是这一句。** 作者在书中第一章通过一个实例告诉读者重构是怎么回事儿，对重构过程有点儿感觉，在把一个面向过程的程序重构成面向对象的程序的过程中，让读者细致体会下重构的过程。在整个过程中，出现最多的一句话是“做完这份（小）修改，我立刻编译并测试，保证自已没有破坏任何东西。”括号中的“小”是我加的，因为作者每次修改的代码量确实很小。从重构过程中，读者可以体会到，一次一小步地前进，其实是最快而且最安全的重构步骤，因为小修改，错了能够非常容易地发现问题，也就能把重构过程中出现的错误尽早地修复掉。

## 有价值的观点
最后是一些阅读过程中觉得有价值的观点，与大家分享：
* 软件开发过程中唯一不变的是变化，重要的是提高应对变化的能力
* 代码是写给人看的，不是写给机器的，所以会有美学意义上的追求
* 代码块越小，代码的功能越容易管理，代码的处理和定位问题也越轻松。
* 代码应该表现自已的目的，在开发或者重构的过程中把自已理解放入程序，这样就不会遗忘曾经想到的东西，就算忘记了，通过代码的简单查看也能得出答案。
